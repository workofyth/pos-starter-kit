version: '3.8'

services:
  # PostgreSQL Database for Production
  postgres:
    image: postgres:16-alpine
    container_name: pos-starter-kit-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pos_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pos-starter-kit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pos_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: pos-starter-kit-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pos-starter-kit-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: pos-starter-kit-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/pos_db}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET:-your-super-secret-key-change-in-production}
      - BETTER_AUTH_URL=${BETTER_AUTH_URL:-http://localhost:3000}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_DB=${POSTGRES_DB:-pos_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pos-starter-kit-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development database only
  postgres-dev:
    image: postgres:16-alpine
    container_name: pos-starter-kit-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pos_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - pos-starter-kit-network
    profiles:
      - dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pos_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Development environment service
  dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: pos-starter-kit-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres-dev:5432/pos_db}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET:-your-super-secret-key-change-in-production}
      - BETTER_AUTH_URL=${BETTER_AUTH_URL:-http://localhost:3000}
      - POSTGRES_DB=${POSTGRES_DB:-pos_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=postgres-dev
      - POSTGRES_PORT=5432
    ports:
      - "3000:3000"
      - "5555:5555"  # For Drizzle Studio
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres-dev:
        condition: service_healthy
    networks:
      - pos-starter-kit-network
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  postgres_dev_data:
    driver: local
  redis_data:
    driver: local

networks:
  pos-starter-kit-network:
    driver: bridge